import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from functools import lru_cache
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from utils.federated_learning import (
    FederatedModelManager, 
    FederatedDataSimulator,
    run_federated_learning_simulation
)

# Cache configuration
st.cache_data(ttl=3600)  # Cache data for 1 hour
def get_benchmark_data() -> Dict[str, float]:
    """Cache benchmark results to avoid recomputation"""
    return {
        "DeepCRISPR": 0.85,
        "CRISPR-Net": 0.88,
        "Cas-OFFinder": 0.81,
        "CHOPCHOP": 0.83,
        "Our Model": 0.91
    }

@dataclass
class TrainingResults:
    """Data class for storing training results"""
    loss: List[float]
    accuracy: List[float]
    epochs: List[int]
    metadata: Dict

@st.cache_resource
def create_figure() -> Tuple[plt.Figure, plt.Axes]:
    """Create and cache matplotlib figure"""
    return plt.subplots()

def plot_training_metric(
    figure: plt.Figure,
    ax: plt.Axes,
    x_data: List[int],
    y_data: List[float],
    title: str,
    y_label: str,
    color: str
) -> None:
    """Unified plotting function for training metrics"""
    ax.clear()
    ax.plot(x_data, y_data, label=y_label, color=color)
    ax.set_xlabel("Epochs")
    ax.set_ylabel(y_label)
    ax.set_title(title)
    ax.legend()
    st.pyplot(figure)

@st.cache_data(ttl=1800)  # Cache for 30 minutes
def train_federated_model() -> Optional[TrainingResults]:
    """
    Run federated learning with caching and proper error handling
    Returns None if training fails
    """
    try:
        st.write("Starting Federated Learning...")
        results = run_federated_learning_simulation()
        
        # Extract and validate training metrics
        loss = results.get("loss", [])
        accuracy = results.get("accuracy", [])
        
        if not loss or not accuracy:
            st.error("Training failed: Missing metrics")
            return None
            
        epochs = list(range(1, len(loss) + 1))
        
        # Create training results object
        return TrainingResults(
            loss=loss,
            accuracy=accuracy,
            epochs=epochs,
            metadata=results
        )
    except Exception as e:
        st.error(f"Training failed: {str(e)}")
        return None

def display_training_results(results: TrainingResults) -> None:
    """Display training results with optimized plotting"""
    # Create cached figures
    loss_fig, loss_ax = create_figure()
    acc_fig, acc_ax = create_figure()
    
    # Plot training metrics
    st.write("### Training Loss")
    plot_training_metric(
        loss_fig, loss_ax,
        results.epochs, results.loss,
        "Training Loss Over Epochs", "Loss", 'red'
    )
    
    st.write("### Training Accuracy")
    plot_training_metric(
        acc_fig, acc_ax,
        results.epochs, results.accuracy,
        "Training Accuracy Over Epochs", "Accuracy", 'blue'
    )
    
    # Display final results
    st.write("### Final Training Results")
    st.write(results.metadata)

@st.cache_data
def benchmark_ai_model() -> None:
    """Run AI model benchmarking with caching"""
    st.write("Running AI Model Benchmarking...")
    comparison_results = get_benchmark_data()
    
    # Create DataFrame once and cache it
    df = pd.DataFrame(
        list(comparison_results.items()),
        columns=["Model", "Accuracy"]
    ).sort_values(by="Accuracy", ascending=False)
    
    st.write("### Model Benchmarking Results")
    st.dataframe(df)

def main():
    # Page configuration
    st.set_page_config(
        page_title="AI-Driven CRISPR Therapy",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Session state initialization
    if 'training_results' not in st.session_state:
        st.session_state.training_results = None
    
    st.title("AI-Driven CRISPR Cancer Immunotherapy Platform")
    
    # Sidebar navigation
    st.sidebar.header("Navigation")
    page = st.sidebar.radio(
        "Select a Page",
        ["Home", "Federated Learning", "Model Benchmarking"]
    )
    
    # Page routing
    if page == "Federated Learning":
        st.header("Federated Learning Training")
        if st.button("Train Model Using Federated Learning"):
            results = train_federated_model()
            if results:
                st.session_state.training_results = results
                display_training_results(results)
    
    elif page == "Model Benchmarking":
        st.header("AI Model Benchmarking")
        if st.button("Run Benchmarking Tests"):
            benchmark_ai_model()
    
    else:  # Home page
        st.write("Welcome to the AI-driven CRISPR cancer immunotherapy platform.")
        st.write("Current user: sayandeepbera472")
        st.write("Last updated: 2025-03-28 07:50:04 UTC")

if __name__ == "__main__":
    main()