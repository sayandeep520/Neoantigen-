// Updated main.js with AI-driven CRISPR visualization and Evolutionary Optimization (EVO2)

document.addEventListener('DOMContentLoaded', function () {
    const cy = cytoscape({
        container: document.getElementById('cy'),
        elements: [],
        style: [
            {
                selector: 'node',
                style: {
                    'background-color': '#666',
                    'label': 'data(id)'
                }
            },
            {
                selector: 'edge',
                style: {
                    'width': 3,
                    'line-color': '#ccc',
                    'target-arrow-color': '#ccc',
                    'target-arrow-shape': 'triangle'
                }
            }
        ]
    });

    // Fetch and visualize AI-predicted CRISPR targets
    async function fetchCRISPRData() {
        try {
            const response = await fetch('/api/get-crispr-data');
            const data = await response.json();
            updateGraph(data);
        } catch (error) {
            console.error('Error fetching CRISPR data:', error);
        }
    }

    // Function to update Cytoscape graph with new data
    function updateGraph(data) {
        cy.elements().remove();
        cy.add(data.nodes);
        cy.add(data.edges);
        cy.layout({ name: 'cose' }).run();
    }

    // Upload file for AI-based CRISPR processing
    document.getElementById('uploadBtn').addEventListener('change', async (event) => {
        const file = event.target.files[0];
        if (file) {
            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/api/process-crispr', {
                    method: 'POST',
                    body: formData
                });
                const results = await response.json();
                updateGraph(results);
            } catch (error) {
                console.error('Error processing CRISPR file:', error);
            }
        }
    });

    // Fetch initial CRISPR data on page load
    fetchCRISPRData();

    // Integrate Evolutionary Optimization from EVO2
    async function optimizeCRISPR() {
        try {
            const response = await fetch('/api/optimize-crispr');
            const data = await response.json();
            console.log('Optimized CRISPR Targets:', data);
            updateGraph(data.optimizedNodes);
        } catch (error) {
            console.error('Error optimizing CRISPR targets:', error);
        }
    }

    // Button to trigger evolutionary optimization
    document.getElementById('optimizeBtn').addEventListener('click', optimizeCRISPR);
});
